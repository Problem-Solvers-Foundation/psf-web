<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Contact Message Details - PSF Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: "#117dd4"
          }
        }
      }
    };
  </script>
  <%- include('../partials/admin-styles') %>
</head>
<body class="bg-gray-50">
  <% const currentPage = 'contacts'; %>

  <%- include('../partials/admin-mobile-header') %>
  <%- include('../partials/admin-sidebar') %>

  <!-- Main Content -->
  <div class="lg:ml-64 min-h-screen pt-14 lg:pt-0">
    <!-- Top Bar -->
    <header class="bg-white border-b border-gray-200 sticky top-14 lg:top-0 z-10">
      <div class="px-4 sm:px-6 lg:px-8 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900">Contact Message Details</h2>
            <p class="text-xs sm:text-sm text-gray-600 mt-1">View and manage contact message from <%= contact.name %></p>
          </div>
          <a href="/admin/contacts" class="text-primary hover:text-blue-800 text-sm font-medium">
            ‚Üê Back to Messages
          </a>
        </div>
      </div>
    </header>

    <!-- Page Content -->
    <main class="p-4 sm:p-6 lg:p-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-6">
          <!-- Contact Information -->
          <div class="bg-white shadow rounded-lg overflow-hidden">
            <div class="px-4 py-5 sm:px-6 bg-gray-50 border-b border-gray-200">
              <h3 class="text-lg leading-6 font-medium text-gray-900">Contact Information</h3>
            </div>
            <div class="px-4 py-5 sm:p-6">
              <dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                <div class="sm:col-span-1">
                  <dt class="text-sm font-medium text-gray-500">Name</dt>
                  <dd class="mt-1 text-sm text-gray-900"><%= contact.name %></dd>
                </div>
                <div class="sm:col-span-1">
                  <dt class="text-sm font-medium text-gray-500">Email</dt>
                  <dd class="mt-1 text-sm text-gray-900">
                    <a href="mailto:<%= contact.email %>" class="text-primary hover:underline"><%= contact.email %></a>
                  </dd>
                </div>
                <div class="sm:col-span-1">
                  <dt class="text-sm font-medium text-gray-500">Submitted</dt>
                  <dd class="mt-1 text-sm text-gray-900">
                    <%= new Date(contact.submittedAt).toLocaleString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) %>
                  </dd>
                </div>
                <div class="sm:col-span-1">
                  <dt class="text-sm font-medium text-gray-500">Status</dt>
                  <dd class="mt-1">
                    <% if (contact.status === 'new') { %>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">New</span>
                    <% } else if (contact.status === 'read') { %>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Read</span>
                    <% } else if (contact.status === 'archived') { %>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">Archived</span>
                    <% } %>
                  </dd>
                </div>
                <% if (contact.ipAddress) { %>
                <div class="sm:col-span-1">
                  <dt class="text-sm font-medium text-gray-500">IP Address</dt>
                  <dd class="mt-1 text-sm text-gray-900"><%= contact.ipAddress %></dd>
                </div>
                <% } %>
              </dl>
            </div>
          </div>

          <!-- Message Content -->
          <div class="bg-white shadow rounded-lg overflow-hidden">
            <div class="px-4 py-5 sm:px-6 bg-gray-50 border-b border-gray-200">
              <h3 class="text-lg leading-6 font-medium text-gray-900">Message</h3>
            </div>
            <div class="px-4 py-5 sm:p-6">
              <div class="prose max-w-none">
                <p class="text-sm text-gray-900 whitespace-pre-wrap"><%= contact.message %></p>
              </div>
            </div>
          </div>

          <!-- Admin Notes -->
          <div class="bg-white shadow rounded-lg overflow-hidden">
            <div class="px-4 py-5 sm:px-6 bg-gray-50 border-b border-gray-200">
              <h3 class="text-lg leading-6 font-medium text-gray-900">Admin Notes</h3>
            </div>
            <div class="px-4 py-5 sm:p-6">
              <form id="notesForm">
                <textarea
                  id="notes"
                  name="notes"
                  rows="4"
                  class="shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-gray-300 rounded-md"
                  placeholder="Add internal notes about this message..."
                ><%= contact.notes || '' %></textarea>
                <div class="mt-3">
                  <button
                    type="submit"
                    id="saveNotesBtn"
                    class="inline-flex justify-center items-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-300"
                  >
                    <span id="saveNotesText">Save Notes</span>
                    <span id="saveNotesSuccess" class="hidden">
                      <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                      Notes saved successfully
                    </span>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Sidebar Actions -->
        <div class="lg:col-span-1">
          <div class="bg-white shadow rounded-lg overflow-hidden sticky top-24">
            <div class="px-4 py-5 sm:px-6 bg-gray-50 border-b border-gray-200">
              <h3 class="text-lg leading-6 font-medium text-gray-900">Actions</h3>
            </div>
            <div class="px-4 py-5 sm:p-6">
              <div class="space-y-4">
                <!-- Reply via Email -->
                <div>
                  <a
                    href="mailto:<%= contact.email %>?subject=Re: Your message to Problem Solver Foundation"
                    class="w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                  >
                    <svg class="mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                    </svg>
                    Reply via Email
                  </a>
                </div>

                <!-- Update Status -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Update Status</label>
                  <select
                    id="statusSelect"
                    onchange="updateStatus()"
                    class="block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm transition-all duration-300"
                  >
                    <option value="new" <%= contact.status === 'new' ? 'selected' : '' %>>New</option>
                    <option value="read" <%= contact.status === 'read' ? 'selected' : '' %>>Read</option>
                    <option value="archived" <%= contact.status === 'archived' ? 'selected' : '' %>>Archived</option>
                  </select>
                  <p id="statusMessage" class="mt-2 text-sm hidden"></p>
                </div>

                <!-- Delete -->
                <div class="pt-4 border-t border-gray-200">
                  <button
                    onclick="deleteContact()"
                    class="w-full inline-flex justify-center items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  >
                    <svg class="mr-2 h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                    Delete Message
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script>
    const contactId = '<%= contact.id %>';

    // Save notes
    document.getElementById('notesForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const notes = document.getElementById('notes').value;
      const btn = document.getElementById('saveNotesBtn');
      const btnText = document.getElementById('saveNotesText');
      const btnSuccess = document.getElementById('saveNotesSuccess');

      // Disable button and show loading
      btn.disabled = true;
      btnText.textContent = 'Saving...';

      try {
        const response = await fetch(`/admin/contacts/update/${contactId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ notes })
        });

        const data = await response.json();

        if (data.success) {
          // Show success state
          btn.classList.remove('bg-primary', 'hover:bg-blue-700');
          btn.classList.add('bg-green-600', 'hover:bg-green-700');
          btnText.classList.add('hidden');
          btnSuccess.classList.remove('hidden');

          // Reset after 3 seconds
          setTimeout(() => {
            btn.classList.remove('bg-green-600', 'hover:bg-green-700');
            btn.classList.add('bg-primary', 'hover:bg-blue-700');
            btnText.classList.remove('hidden');
            btnSuccess.classList.add('hidden');
            btnText.textContent = 'Save Notes';
            btn.disabled = false;
          }, 3000);
        } else {
          // Show error state
          btn.classList.remove('bg-primary', 'hover:bg-blue-700');
          btn.classList.add('bg-red-600', 'hover:bg-red-700');
          btnText.textContent = 'Error: ' + (data.error || 'Unknown error');

          // Reset after 3 seconds
          setTimeout(() => {
            btn.classList.remove('bg-red-600', 'hover:bg-red-700');
            btn.classList.add('bg-primary', 'hover:bg-blue-700');
            btnText.textContent = 'Save Notes';
            btn.disabled = false;
          }, 3000);
        }
      } catch (error) {
        console.error('Error:', error);

        // Show error state
        btn.classList.remove('bg-primary', 'hover:bg-blue-700');
        btn.classList.add('bg-red-600', 'hover:bg-red-700');
        btnText.textContent = 'Error saving notes';

        // Reset after 3 seconds
        setTimeout(() => {
          btn.classList.remove('bg-red-600', 'hover:bg-red-700');
          btn.classList.add('bg-primary', 'hover:bg-blue-700');
          btnText.textContent = 'Save Notes';
          btn.disabled = false;
        }, 3000);
      }
    });

    // Update status
    async function updateStatus() {
      const statusSelect = document.getElementById('statusSelect');
      const statusMessage = document.getElementById('statusMessage');
      const status = statusSelect.value;

      // Disable select while updating
      statusSelect.disabled = true;

      // Show loading message
      statusMessage.textContent = 'Updating...';
      statusMessage.classList.remove('hidden', 'text-green-600', 'text-red-600');
      statusMessage.classList.add('text-gray-600');

      try {
        const response = await fetch(`/admin/contacts/update/${contactId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status })
        });

        const data = await response.json();

        if (data.success) {
          // Show success message
          statusMessage.textContent = 'Status updated successfully!';
          statusMessage.classList.remove('text-gray-600', 'text-red-600');
          statusMessage.classList.add('text-green-600');

          // Reload after 1.5 seconds to show the updated status
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          // Show error message
          statusMessage.textContent = 'Error: ' + (data.error || 'Unknown error');
          statusMessage.classList.remove('text-gray-600', 'text-green-600');
          statusMessage.classList.add('text-red-600');
          statusSelect.disabled = false;

          // Hide error after 3 seconds
          setTimeout(() => {
            statusMessage.classList.add('hidden');
          }, 3000);
        }
      } catch (error) {
        console.error('Error:', error);

        // Show error message
        statusMessage.textContent = 'Network error. Please try again.';
        statusMessage.classList.remove('text-gray-600', 'text-green-600');
        statusMessage.classList.add('text-red-600');
        statusSelect.disabled = false;

        // Hide error after 3 seconds
        setTimeout(() => {
          statusMessage.classList.add('hidden');
        }, 3000);
      }
    }

    // Delete contact
    async function deleteContact() {
      if (!confirm('Are you sure you want to delete this contact message? This action cannot be undone.')) {
        return;
      }

      try {
        const response = await fetch(`/admin/contacts/delete/${contactId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();

        if (data.success) {
          window.location.href = '/admin/contacts';
        } else {
          alert('Error deleting contact: ' + (data.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error deleting contact');
      }
    }
  </script>
</body>
</html>
