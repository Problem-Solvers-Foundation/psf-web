#!/bin/bash

# Script de verifica√ß√£o de seguran√ßa
# Verifica se arquivos sens√≠veis foram commitados acidentalmente

echo "üîí Verificando seguran√ßa do reposit√≥rio..."
echo ""

FOUND_ISSUES=0

# Verificar se .env est√° no index
if git ls-files | grep -q "\.env$"; then
    echo "‚ùå ERRO: Arquivo .env est√° sendo rastreado pelo Git!"
    echo "   Execute: git rm --cached backend/.env"
    FOUND_ISSUES=1
fi

# Verificar se serviceAccountKey.json est√° no index
if git ls-files | grep -q "serviceAccountKey.json"; then
    echo "‚ùå ERRO: serviceAccountKey.json est√° sendo rastreado pelo Git!"
    echo "   Execute: git rm --cached backend/serviceAccountKey.json"
    FOUND_ISSUES=1
fi

# Verificar se h√° secrets no c√≥digo
if git grep -i "sk_live_" -- "*.js" "*.json" 2>/dev/null | grep -v node_modules; then
    echo "‚ö†Ô∏è  AVISO: Poss√≠vel API key encontrada no c√≥digo!"
    FOUND_ISSUES=1
fi

# Verificar se .gitignore existe
if [ ! -f .gitignore ]; then
    echo "‚ùå ERRO: .gitignore n√£o encontrado!"
    FOUND_ISSUES=1
fi

# Verificar se .env.example existe
if [ ! -f backend/.env.example ]; then
    echo "‚ö†Ô∏è  AVISO: backend/.env.example n√£o encontrado!"
fi

if [ $FOUND_ISSUES -eq 0 ]; then
    echo "‚úÖ Nenhum problema de seguran√ßa encontrado!"
    echo ""
    echo "Checklist final antes de tornar p√∫blico:"
    echo "  [ ] Revisei todo o c√≥digo"
    echo "  [ ] Regenerei todas as credenciais sens√≠veis"
    echo "  [ ] Configurei vari√°veis de ambiente no servidor de produ√ß√£o"
    echo "  [ ] Testei a aplica√ß√£o com as novas credenciais"
else
    echo ""
    echo "‚ùå Encontrados $FOUND_ISSUES problema(s) de seguran√ßa!"
    echo "   Corrija antes de tornar o reposit√≥rio p√∫blico."
    exit 1
fi
